/*
Train API

An API for accessing train information and booking train tickets.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// DefaultAPIService DefaultAPI service
type DefaultAPIService service

type ApiBookUserIdTrainIdTravelClassTicketTypePostRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	userId string
	trainId string
	travelClass string
	ticketType string
}

func (r ApiBookUserIdTrainIdTravelClassTicketTypePostRequest) Execute() (*http.Response, error) {
	return r.ApiService.BookUserIdTrainIdTravelClassTicketTypePostExecute(r)
}

/*
BookUserIdTrainIdTravelClassTicketTypePost Book a train

Book a train based on specified parameters.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId User ID
 @param trainId Train ID
 @param travelClass Travel class
 @param ticketType Ticket type
 @return ApiBookUserIdTrainIdTravelClassTicketTypePostRequest
*/
func (a *DefaultAPIService) BookUserIdTrainIdTravelClassTicketTypePost(ctx context.Context, userId string, trainId string, travelClass string, ticketType string) ApiBookUserIdTrainIdTravelClassTicketTypePostRequest {
	return ApiBookUserIdTrainIdTravelClassTicketTypePostRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		trainId: trainId,
		travelClass: travelClass,
		ticketType: ticketType,
	}
}

// Execute executes the request
func (a *DefaultAPIService) BookUserIdTrainIdTravelClassTicketTypePostExecute(r ApiBookUserIdTrainIdTravelClassTicketTypePostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.BookUserIdTrainIdTravelClassTicketTypePost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/book/{userId}/{trainId}/{travelClass}/{ticketType}"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"trainId"+"}", url.PathEscape(parameterValueToString(r.trainId, "trainId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"travelClass"+"}", url.PathEscape(parameterValueToString(r.travelClass, "travelClass")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ticketType"+"}", url.PathEscape(parameterValueToString(r.ticketType, "ticketType")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiTrainsDepartureStationArrivalStationDepartureDateReturnDateNumTicketsTravelClassGetRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	departureStation string
	arrivalStation string
	departureDate string
	returnDate string
	numTickets int32
	travelClass string
}

func (r ApiTrainsDepartureStationArrivalStationDepartureDateReturnDateNumTicketsTravelClassGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.TrainsDepartureStationArrivalStationDepartureDateReturnDateNumTicketsTravelClassGetExecute(r)
}

/*
TrainsDepartureStationArrivalStationDepartureDateReturnDateNumTicketsTravelClassGet Get train information

Retrieve information about available trains based on specified parameters.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param departureStation Departure station code
 @param arrivalStation Arrival station code
 @param departureDate Departure date
 @param returnDate Return date (optional)
 @param numTickets Number of tickets
 @param travelClass Travel class
 @return ApiTrainsDepartureStationArrivalStationDepartureDateReturnDateNumTicketsTravelClassGetRequest
*/
func (a *DefaultAPIService) TrainsDepartureStationArrivalStationDepartureDateReturnDateNumTicketsTravelClassGet(ctx context.Context, departureStation string, arrivalStation string, departureDate string, returnDate string, numTickets int32, travelClass string) ApiTrainsDepartureStationArrivalStationDepartureDateReturnDateNumTicketsTravelClassGetRequest {
	return ApiTrainsDepartureStationArrivalStationDepartureDateReturnDateNumTicketsTravelClassGetRequest{
		ApiService: a,
		ctx: ctx,
		departureStation: departureStation,
		arrivalStation: arrivalStation,
		departureDate: departureDate,
		returnDate: returnDate,
		numTickets: numTickets,
		travelClass: travelClass,
	}
}

// Execute executes the request
func (a *DefaultAPIService) TrainsDepartureStationArrivalStationDepartureDateReturnDateNumTicketsTravelClassGetExecute(r ApiTrainsDepartureStationArrivalStationDepartureDateReturnDateNumTicketsTravelClassGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.TrainsDepartureStationArrivalStationDepartureDateReturnDateNumTicketsTravelClassGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/trains/{departureStation}/{arrivalStation}/{departureDate}/{returnDate}/{numTickets}/{travelClass}"
	localVarPath = strings.Replace(localVarPath, "{"+"departureStation"+"}", url.PathEscape(parameterValueToString(r.departureStation, "departureStation")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"arrivalStation"+"}", url.PathEscape(parameterValueToString(r.arrivalStation, "arrivalStation")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"departureDate"+"}", url.PathEscape(parameterValueToString(r.departureDate, "departureDate")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"returnDate"+"}", url.PathEscape(parameterValueToString(r.returnDate, "returnDate")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"numTickets"+"}", url.PathEscape(parameterValueToString(r.numTickets, "numTickets")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"travelClass"+"}", url.PathEscape(parameterValueToString(r.travelClass, "travelClass")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
